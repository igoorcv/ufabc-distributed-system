import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

interface FileTransfer extends java.rmi.Remote {
	byte[] downloadFile(String filename, String downloadFileName, String ip, int porta) throws RemoteException;

	List<String> search(String fileName, String ip, int porta) throws RemoteException;

	boolean join(String peerName, String fileName, String ip, int porta) throws RemoteException;

	boolean update(String filename) throws RemoteException;

	// void requestDownload(String peerName, String fileName) throws
	// RemoteException;

	void receiveFile(String peerName, String fileName, byte[] fileData) throws RemoteException;
}

class PeerInfo {
	private String name;
	private List<String> files;

	public PeerInfo(String name) {
		this.name = name;
		this.files = new ArrayList<>();
	}

	public String getFileName(String filename) {
		// String name = new String(filename.toUpperCase());
		return name;
	}

	public String getName(String peername) {
		String name = new String(peername.toUpperCase());
		return name;
	}

	public String getPeerName(String peername) {
		String name = new String(peername.toUpperCase());
		return name;
	}

	public List<String> getFiles() {
		return files;
	}

	public void addFile(String fileName) {
		files.add(fileName);
	}

	public boolean hasFile(String fileName) {
		return files.contains(fileName);
	}
}

class FileTransferImpl extends UnicastRemoteObject implements FileTransfer {
	private List<PeerInfo> peers;
	private Map<String, String> nameFiles;

	private PeerInfo getPeerByName(String peerName) {
		for (PeerInfo peer : peers) {
			if (peer.getPeerName(peerName).equals(peerName)) {
				return peer;
			}
		}
		return null; // Retorna null caso o peer não seja encontrado
	}

	protected FileTransferImpl() throws RemoteException {
		super();
		peers = new ArrayList<>();
		nameFiles = new HashMap<>();
	}

	public boolean join(String peerName, String fileName, String ip, int porta) throws RemoteException {
		System.out.println("Peer " + ip + ":" + porta + " adicionado com arquivos " + fileName + ".");
		PeerInfo peer = getPeerByName(peerName);

		if (peer != null) {
			System.out.println("Arquivos não adicionados.");
			return false;

		} else {

			PeerInfo newPeer = new PeerInfo(peerName);
			newPeer.addFile(fileName);
			peers.add(newPeer);
			nameFiles.put(peerName, fileName);
		}

		return true;
	}

	public List<String> search(String fileName, String ip, int porta) throws RemoteException {
		System.out.println("Peer " + ip + ":" + porta + " solicitou arquivo " + fileName + ".");
		List<String> peersWithFile = new ArrayList<>();

		for (PeerInfo peer : peers) {
			if (peer.hasFile(fileName)) {
				peersWithFile.add(peer.getFileName(fileName));
			}
		}
		return peersWithFile;
	}
	

	public boolean update(String filename) throws RemoteException {
		return false;
		// Lógica para atualização do arquivo
	}

	public byte[] downloadFile(String filename, String downloadFileName, String ip, int porta) throws RemoteException {
		File file = new File(filename);

		try {
			FileInputStream fileInputStream = new FileInputStream(file);
			byte[] fileData = new byte[(int) file.length()];
			fileInputStream.read(fileData);
			fileInputStream.close();

			return fileData;
		} catch (Exception e) {
			System.err.println("Erro ao ler o arquivo: " + e.toString());
			e.printStackTrace();
		}
		return null;
	}

	public void receiveFile(String peerName, String fileName, byte[] fileData) throws RemoteException {
		// Lógica para receber e armazenar o arquivo em uma pasta específica do peer
		try {
            FileOutputStream fileOutputStream = new FileOutputStream(peerName + "_" + fileName);
            fileOutputStream.write(fileData);
            fileOutputStream.close();
        } catch (Exception e) {
            System.err.println("Erro ao receber o arquivo: " + e.toString());
            e.printStackTrace();
        }
		
		System.out.println("Arquivo " + fileName + " recebido do peer " + peerName);
	}
}

public class CentralServer {

	public static void main(String[] args) throws NotBoundException {
		try {
            // Inicializar o registro RMI
            Registry registry = LocateRegistry.createRegistry(1099);

            // Criar uma instância do objeto remoto
            FileTransfer fileTransfer = new FileTransferImpl();

            // Vincular o objeto remoto ao registro
            registry.rebind("FileTransfer", fileTransfer);

            System.out.println("Servidor iniciado. Aguardando requisições...");
            System.out.println();
        } catch (Exception e) {
            System.err.println("Erro no servidor: " + e.toString());
            e.printStackTrace();
        }
	}
}
