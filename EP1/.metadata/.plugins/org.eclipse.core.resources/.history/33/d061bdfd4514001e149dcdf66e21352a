import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

interface FileTransfer extends java.rmi.Remote {
	byte[] downloadFile(String filename) throws RemoteException;

	List<String> search(String fileName) throws RemoteException;

	boolean join(String peerName, String fileName) throws RemoteException;

	void update(String filename) throws RemoteException;

	void receiveFile(String peerName, String fileName, byte[] fileData) throws RemoteException;
}

class PeerInfo {
	private String name;
	private List<String> files;

	public PeerInfo(String name) {
		this.name = name;
		this.files = new ArrayList<>();
	}

	public String getFileName(String filename) {
		// String name = new String(filename.toUpperCase());
		return name;
	}

	public String getName(String peername) {
		String name = new String(peername.toUpperCase());
		return name;
	}

	public String getPeerName(String peername) {
		String name = new String(peername.toUpperCase());
		return name;
	}

	public List<String> getFiles() {
		return files;
	}

	public void addFile(String fileName) {
		files.add(fileName);
	}

	public boolean hasFile(String fileName) {
		return files.contains(fileName);
	}
}

class FileTransferImpl extends UnicastRemoteObject implements FileTransfer {
	private List<PeerInfo> peers;
	private Map<String, String> nameFiles;

	private PeerInfo getPeerByName(String peerName) {
		for (PeerInfo peer : peers) {
			if (peer.getPeerName(peerName).equals(peerName)) {
				return peer;
			}
		}
		return null; // Retorna null caso o peer não seja encontrado
	}

	protected FileTransferImpl() throws RemoteException {
		super();
		peers = new ArrayList<>();
		nameFiles = new HashMap<>();
	}

	public boolean join(String peerName, String fileName) throws RemoteException {
		System.out.println("Peer " + peerName + " se juntou ao servidor com o arquivo " + fileName);
		// System.out.println();
		PeerInfo peer = getPeerByName(peerName);

		if (peer != null) {
			System.out.println("não adicionei, gatinho");
			return false;

		} else {

			PeerInfo newPeer = new PeerInfo(peerName);
			newPeer.addFile(fileName);
			peers.add(newPeer);
			nameFiles.put(peerName, fileName);
			// return true;
		}

		return true;
	}

	public List<String> search(String fileName) throws RemoteException {
		// public boolean search(String fileName) throws RemoteException {
		List<String> peersWithFile = new ArrayList<>();

		for (PeerInfo peer : peers) {
			if (peer.hasFile(fileName)) {
				peersWithFile.add(peer.getFileName(fileName));
			}
		}
		return peersWithFile;
	}

	public void update(String filename) throws RemoteException {
		// Lógica para atualização do arquivo
	}

	public byte[] downloadFile(String filename) throws RemoteException {
		// Lógica para download do arquivo
		return null;
	}

	public void receiveFile(String peerName, String fileName, byte[] fileData) throws RemoteException {

		// Lógica para receber e armazenar o arquivo em uma pasta específica do peer
		System.out.println("Arquivo " + fileName + " recebido do peer " + peerName);
	}
}

public class CentralServer {

	public static void main(String[] args) throws NotBoundException {
		try {
			// Inicializar o registro RMI
			Registry registry = LocateRegistry.createRegistry(1099);
			//Registry registry = LocateRegistry.getRegistry(1099);

			// Criar uma instância do objeto remoto
			// FileTransfer fileTransfer = new FileTransferImpl();

			// Obter a referência do objeto remoto
			try {
				FileTransfer fileTransfer = (FileTransfer) registry.lookup("FileTransfer");

				// Nome do peer e arquivo a ser solicitado
				String peerName = "PeerX";
				String fileName = "arquivo.txt";

				// Juntar-se ao servidor
				boolean joinResult = fileTransfer.join(peerName, fileName);
				if (joinResult) {
					System.out.println("Peer " + peerName + " se juntou ao servidor com o arquivo " + fileName);
				} else {
					System.out.println("Falha ao juntar-se ao servidor");
					return;
				}

				// Buscar o arquivo
				List<String> peersWithFile = fileTransfer.search(fileName);
				if (peersWithFile.isEmpty()) {
					System.out.println("O arquivo " + fileName + " não foi encontrado em nenhum peer.");
					return;
				}

				// Escolher um peer para fazer o download (neste exemplo, o primeiro da lista)
				String peerWithFile = peersWithFile.get(0);

				// Requisitar o download do arquivo ao peer selecionado
				byte[] fileData = fileTransfer.downloadFile(fileName);

				// Verificar se o download foi bem-sucedido
				if (fileData != null) {
					// Receber e armazenar o arquivo
					fileTransfer.receiveFile(peerName, fileName, fileData);
					System.out.println(
							"Download do arquivo " + fileName + " concluído com sucesso do peer " + peerWithFile);
				} else {
					System.out.println("Falha ao baixar o arquivo " + fileName + " do peer " + peerWithFile);
				}

				// Vincular o objeto remoto ao registro
				// registry.rebind("FileTransfer", fileTransfer);

				System.out.println("Servidor iniciado. Aguardando requisições...");
				
			} catch (RemoteException e) {
				System.out.println("Falha ao obter a referência do objeto remoto: " + e.getMessage());
			}
		} catch (RemoteException e) {
			System.out.println("Falha ao conectar ao registro RMI: " + e.getMessage());
			//e.printStackTrace();
		}
	}
}
