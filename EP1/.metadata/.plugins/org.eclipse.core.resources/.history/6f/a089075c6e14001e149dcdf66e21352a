import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.List;
import java.util.Scanner;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.net.ServerSocket;
import java.net.Socket;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class Peer {
	private static final String SERVER_HOST = "localhost";
	private static final int SERVER_PORT = 1099;
	private ServerSocket serverSocket;

	public void start() {
		// Obter o endereço IP
		String ip = "";
		try {
			InetAddress address = InetAddress.getLocalHost();
			ip = address.getHostAddress();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}

		// Obter a porta
		int porta = 0;
		try (ServerSocket socket = new ServerSocket(0)) {
			porta = socket.getLocalPort();
		} catch (IOException e) {
			e.printStackTrace();
		}

		try {
			// Inicia o servidor
			serverSocket = new ServerSocket(0); // Porta aleatória
			int portaPeerServer = serverSocket.getLocalPort();
			System.out.println("Peer iniciado na porta " + portaPeerServer);

			// Inicia uma thread para tratar as conexões de outros peers
			Thread serverThread = new Thread(() -> {
				while (true) {
					try {
						Socket clientSocket = serverSocket.accept();
						handleRequest(clientSocket);
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			});
			serverThread.start();
			

			// Obtém a referência para o registro RMI do servidor
			Registry registry = LocateRegistry.getRegistry(SERVER_HOST, SERVER_PORT);
			// Registry registry = LocateRegistry.getRegistry(serverHost, serverPort);

			// Obtém a referência para o objeto remoto FileTransfer no servidor
			FileTransfer fileTransfer = (FileTransfer) registry.lookup("FileTransfer");

			// Cria um objeto Scanner para receber as entradas do usuário
			Scanner scanner = new Scanner(System.in);

			while (true) {
				// Exibe o menu de opções
				System.out.println("\n--- Menu ---");
				System.out.println("1. JOIN");
				System.out.println("2. SEARCH");
				System.out.println("3. DOWNLOAD");
				System.out.println("0. Sair");
				System.out.print("Escolha uma opção: ");
				int option = scanner.nextInt();
				List<String> extensoesValidas = List.of(".doc", ".pdf", ".txt", "mp3", "mp4"); // Exemplo de extensões
																								// válidas

				switch (option) {
				case 1:
					// Requisição JOIN
					System.out.print("Digite o nome do peer para se juntar: ");
					String peerName = scanner.next();
					System.out.print("Digite o nome do arquivo a ser enviado: ");
					String fileName = scanner.next();

					boolean extensaoValida1 = false;
					for (String extensao : extensoesValidas) {
						if (fileName.endsWith(extensao)) {
							extensaoValida1 = true;
							break;
						}
					}

					if (extensaoValida1) {
						fileTransfer.join(peerName, fileName, ip, porta);

						FileTransfer server1 = (FileTransfer) registry.lookup("FileTransfer");
						boolean joinResult = server1.join(peerName, fileName, ip, porta);
						if (joinResult == true) { // JOIN_OK
							System.out.println();
							System.out.println("Sou peer " + ip + " : " + porta + " com arquivos " + fileName + ".");
						} else if (joinResult == false) {
							System.out.println();
							System.out.println("JOIN_NOK"); // JOIN_NOK
						}
						break;

					} else {
						System.out.println(
								"Erro: O nome do arquivo não possui uma extensão válida ou a extensão utilizada não é suportada.");
						break;
					}

				case 2:
					// Requisição SEARCH
					System.out.print("Digite o nome do arquivo a ser pesquisado: ");
					String filename = scanner.next();

					boolean extensaoValida2 = false;
					for (String extensao : extensoesValidas) {
						if (filename.endsWith(extensao)) {
							extensaoValida2 = true;
							break;
						}
					}

					if (extensaoValida2) {
						fileTransfer.search(filename, ip, porta);

						FileTransfer server2 = (FileTransfer) registry.lookup("FileTransfer");
						List<String> searchResult = server2.search(filename, ip, porta);

						if (searchResult.isEmpty()) {
							System.out.println("Arquivo não encontrado em nenhum peer.");
						} else {
							System.out.println("Arquivo encontrado nos seguintes peers: " + searchResult);
						}
						break;

					} else {
						System.out.println(
								"Erro: O nome do arquivo não possui uma extensão válida ou a extensão utilizada não é suportada.");
						break;
					}

				case 3:
					// Requisição DOWNLOAD
					System.out.print("Digite o nome do arquivo a ser baixado: ");
					String downloadFileName = scanner.next();

					List<String> downloadPeers = fileTransfer.search(downloadFileName, ip, porta);
					if (downloadPeers.isEmpty()) {
						System.out.println("Arquivo não encontrado em nenhum peer.");
					} else {
						System.out.println("Arquivo encontrado nos seguintes peers: " + downloadPeers);
						System.out.print("Digite o nome do peer de download: ");
						String downloadPeer = scanner.next();
						System.out.print("Digite o IP do peer de download: ");
						String peerIP = scanner.next();
						System.out.print("Digite a porta do peer de download: ");
						int peerPort = scanner.nextInt();

						try (Socket socket = new Socket(peerIP, peerPort)) {

							// Cria o OutputStream para enviar a mensagem TCP
							OutputStream outputStream = socket.getOutputStream();

							// Converte a mensagem para um array de bytes
							String mensagem = "Olá, peer! Envie-me o arquivo para download: " + downloadFileName;
							byte[] mensagemBytes = mensagem.getBytes();

							// Envia a requisição de download ao peer
							outputStream.write(mensagemBytes);
							outputStream.write(downloadFileName.getBytes());
							outputStream.flush();
							System.out.println("dentro do method");

							// Lê o arquivo do peer e salva localmente
							InputStream inputStream = socket.getInputStream();
							byte[] fileData = inputStream.readAllBytes();
							String filePath = "./Downloads/" + downloadFileName;
							FileOutputStream fileOutputStream = new FileOutputStream(filePath);
							fileOutputStream.write(fileData);
							fileOutputStream.close();

							System.out.println("Arquivo " + downloadFileName + " baixado com sucesso.");

						} catch (IOException e) {
							System.out.println("Falha ao baixar o arquivo: " + e.getMessage());
						}
					}
					break;

				case 0:
					// Sair
					System.out.println("Encerrando o peer.");
					scanner.close();
					System.exit(0);

				default:
					System.out.println("Opção inválida. Tente novamente.");
					break;
				}
			}
		} catch (

		Exception e) {
			e.printStackTrace();
		}
	}
	
	private void handleRequest(Socket clientSocket) {
        Thread requestThread = new Thread(() -> {
            try {
                // Lê a requisição do peer
                InputStream inputStream = clientSocket.getInputStream();
                byte[] requestData = inputStream.readAllBytes();
                String request = new String(requestData);

                // Processa a requisição
                String response = processRequest(request);

                // Envia a resposta ao peer
                OutputStream outputStream = clientSocket.getOutputStream();
                String response = "RESPONSE"; // Substitua por sua resposta real
                outputStream.write(response.getBytes());
                outputStream.flush();

                // Fecha a conexão com o peer
                clientSocket.close();
                
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
        requestThread.start();
    }

	private String processRequest(String request) {
		 try {
		        // Exibe a requisição recebida do peer
		        System.out.println("Requisição recebida: " + request);

		        // Cria um objeto Scanner para ler a opção do peer
		        Scanner scanner = new Scanner(System.in);

		        // Exibe a mensagem de requisição e solicita a opção ao peer
		        System.out.println("Requisição recebida do peer. Deseja enviar o arquivo? (S/N)");
		        String option = scanner.nextLine();

		        // Fecha o Scanner
		        scanner.close();
		        
		     // Processa a opção do peer
		        if (option.equalsIgnoreCase("S")) {
		            // Opção de envio do arquivo escolhida
		            // Abra o arquivo que será enviado
		            String filePath = "./Arquivos/arquivo.txt"; // Caminho do arquivo a ser enviado
		            File file = new File(filePath);

		            // Verifica se o arquivo existe e pode ser lido
		            if (file.exists() && file.isFile() && file.canRead()) {
		                // Envia a resposta "ACEITO" para o peer requisitante
		                OutputStream outputStream = clientSocket.getOutputStream();
		                String response = "ACEITO";
		                outputStream.write(response.getBytes());
		                outputStream.flush();

		                // Lê o arquivo e envia os dados para o peer
		                FileInputStream fileInputStream = new FileInputStream(file);
		                byte[] buffer = new byte[4096]; // Tamanho do buffer de leitura (4 KB)
		                int bytesRead;
		                while ((bytesRead = fileInputStream.read(buffer)) != -1) {
		                    outputStream.write(buffer, 0, bytesRead);
		                    outputStream.flush();
		                }
		                fileInputStream.close();

		                System.out.println("Arquivo enviado com sucesso.");
		            } else {
		                // Caso o arquivo não possa ser lido, envia uma mensagem de recusa
		                String response = "RECUSADO - Arquivo indisponível";
		                OutputStream outputStream = clientSocket.getOutputStream();
		                outputStream.write(response.getBytes());
		                outputStream.flush();
		                System.out.println("Requisição recusada: arquivo indisponível");
		            }
		        } else {
		            // Opção de não envio do arquivo escolhida
		            // Envia uma mensagem de recusa para o peer requisitante
		            String response = "RECUSADO";
		            OutputStream outputStream = clientSocket.getOutputStream();
		            outputStream.write(response.getBytes());
		            outputStream.flush();
		            System.out.println("Requisição recusada pelo peer.");
		        }
		    } catch (IOException e) {
		        e.printStackTrace();
		    } finally {
		        try {
		            // Fecha a conexão com o peer
		            clientSocket.close();
		        } catch (IOException e) {
		            e.printStackTrace();
		        }
		    }
	}
	
    public static void main(String[] args) {
        Peer peer = new Peer();
        peer.start();
    }
}
