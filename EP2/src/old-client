import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.net.ServerSocket;
import java.net.Socket;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;

public class client {
	private static final String SERVER_HOST = "localhost";
	private static final int SERVER_A_PORT = 10097;
	private static final int SERVER_B_PORT = 10098;
	private static final int SERVER_C_PORT = 10099;
	int[] serversList = { SERVER_A_PORT, SERVER_B_PORT, SERVER_C_PORT };

	private ServerSocket serverSocket;

	public void start() {
		// Obter o endereço IP da máquina que está executando o client.java
		String ip = "";
		try {
			InetAddress address = InetAddress.getLocalHost();
			ip = address.getHostAddress();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}

		// Obter a porta disponível 
		int porta = 0;
		try (ServerSocket socket = new ServerSocket(0)) {
			porta = socket.getLocalPort();
		} catch (IOException e) {
			e.printStackTrace();
		}

		try {

			// Cria um objeto Scanner para receber as entradas do usuário
			Scanner scanner = new Scanner(System.in);

			while (true) {
				// Exibe o menu de opções
				System.out.println("\n--- Menu ---");
				System.out.println("1. INIT");
				System.out.println("2. PUT");
				System.out.println("3. GET");
				System.out.println("0. Sair");
				System.out.print("Escolha uma opção: ");

				// Verifica se o próximo valor é um número inteiro
				if (scanner.hasNextInt()) {
					int option = scanner.nextInt();

					switch (option) {
					case 1:
						// Opção INIT

						// Inicialização do servidor em uma Porta Aleatória
						serverSocket = new ServerSocket(0);
						int portaPeerServer = serverSocket.getLocalPort();
						System.out.println("Peer-server iniciado na porta " + portaPeerServer);

						// Inicia uma thread para tratar as conexões de outros peers
						Thread serverThread = new Thread(() -> {
							while (true) {
								try {
									Socket clientSocket = serverSocket.accept();
									handleRequest(clientSocket);
								} catch (IOException e) {
									e.printStackTrace();
								}
							}
						});
						serverThread.start();

						//Escolha um server aleatório para fazer a requisição PUT ou GET
						Random random = new Random();
						int randomIndex = random.nextInt(serversList.length); // Gere um índice aleatório entre 0 (inclusive) e o tamanho da matriz (exclusive)
						int randomServer = serversList[randomIndex]; // Acesse o valor aleatório na matriz usando o índice gerado

						// Obtém a referência para o registro RMI do servidor
						Registry registry = LocateRegistry.getRegistry(SERVER_HOST, randomServer);

						// Obtém a referência para o objeto remoto FileTransfer no servidor
						FileTransfer fileTransfer = (FileTransfer) registry.lookup("FileTransfer");

						break;

					case 2:
						// Requisição PUT
						System.out.print("Digite a Key: ");
						String key = scanner.next();
						System.out.print("Digite o Value: ");
						String value = scanner.next();

						//Obtém e envia os dados (key, value, timestamp) para o endereço definido (ip, porta)
						long timestamp_do_client = System.currentTimeMillis();
						fileTransfer.put(key, value, ip, porta, timestamp_do_client);
						FileTransfer serverPUT = (FileTransfer) registry.lookup("FileTransfer");
						boolean putResult = serverPUT.put(key, value, ip, porta);

						if (putResult == true) {
							System.out.println();
							System.out.println("PUT_OK key:" + key + "value" + value + "timestamp" + timestamp_do_client + "realizada no servidor [" + ip + ":" + porta + "].");

						} else if (putResult == false) {
							System.out.println();
							System.out.println("PUT_NOK key:" + key + errorMessage + "error.");
						}

						// Fecha a conexão com o server.java
						serverSocket.close();

						break;

					case 3:
						// Requisição GET
						System.out.print("Digite a Key: ");
						String searchKey = scanner.next();
						
						long timestampGET = System.currentTimeMillis();
						List<String> returnKeys = fileTransfer.get(searchKey, ip, porta, timestampGET);

						if (returnKeys.isEmpty()) {
							System.out.println(null);
						} else {
							System.out.println("GET key: " + key + "value: " + value + "obtido do servidor [" + ip + ":" + porta + "], meu timestamp " + timestamp_do_client + "e do servidor " + timestamp_do_server);
							System.out.println("Arquivo encontrado nos seguintes peers: " + returnKeys);
						}
						break;

					case 0:
						// Sair
						System.out.println("Encerrando o peer.");
						scanner.close();
						System.exit(0);
						break;

					default:
						System.out.println("Opção inválida1. Tente novamente.");
						break;
					}

				} else {
					System.out.println("Opção inválida2. Tente novamente.");
					scanner.next();
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void handleRequest(Socket clientSocket) {
		Thread requestThread = new Thread(() -> {
			try {
				// Lê a requisição do peer
				InputStream inputStream = clientSocket.getInputStream();
				byte[] buffer = new byte[4096]; // Tamanho do buffer de leitura (4 KB)
				int bytesRead = inputStream.read(buffer);
				String request = new String(buffer, 0, bytesRead);

				// Processa a requisição
				processRequest(clientSocket, request);

				// Envia a resposta ao peer
				OutputStream outputStream = clientSocket.getOutputStream();
				String response = "RESPONSE"; // Substitua por sua resposta real
				outputStream.write(response.getBytes());
				outputStream.flush();

				// Fecha a conexão com o peer
				clientSocket.close();

			} catch (IOException e) {
				e.printStackTrace();
			}
		});
		requestThread.start();
	}

	private void processRequest(Socket clientSocket, String request) {
		try {
			// Exibe a requisição recebida do peer
			System.out.println();
			System.out.println();
			System.out.println("Requisição recebida! Mgs: " + request);

			// Cria um objeto Scanner para ler a opção do peer
			Scanner scanner = new Scanner(System.in);

			// Exibe a mensagem de requisição e solicita a opção ao peer
			System.out.print("Deseja enviar o arquivo: ");
			String choice = scanner.next();
			scanner.close();

			System.out.print("Informe o path do arquivo: ");
			String path = scanner.next();
			scanner.close();

			// Aceita ou recusa?
			if (choice == "S") {
				System.out.println("ENTROU NO IF");

				// Abra o arquivo que será enviado
				String filePath = path;
				File file = new File(filePath);
				System.out.println("ABRIU ARQUIVO");

				// Verifica se o arquivo existe e pode ser lido
				if (file.exists() && file.isFile() && file.canRead()) {

					// Envia para o peer requisitante!
					OutputStream outputStream = clientSocket.getOutputStream();
					String response = "ACEITO";
					outputStream.write(response.getBytes());
					outputStream.flush();

					// Lê o arquivo e envia os dados para o peer
					FileInputStream fileInputStream = new FileInputStream(file);
					byte[] buffer = new byte[4096]; // Tamanho do buffer de leitura (4 KB)
					int bytesRead;
					while ((bytesRead = fileInputStream.read(buffer)) != -1) {
						outputStream.write(buffer, 0, bytesRead);
						outputStream.flush();
					}
					fileInputStream.close();

					System.out.println("Arquivo enviado com sucesso.");
				} else {
					// Caso o arquivo não possa ser lido, envia uma mensagem de recusa
					String response = "RECUSADO";
					OutputStream outputStream = clientSocket.getOutputStream();
					outputStream.write(response.getBytes());
					outputStream.flush();
					System.out.println("Requisição recusada: arquivo indisponível");
				}
			} else if (choice == "N") {
				// Opção de não envio do arquivo escolhida
				// Envia uma mensagem de recusa para o peer requisitante
				String response = "RECUSADO";
				OutputStream outputStream = clientSocket.getOutputStream();
				outputStream.write(response.getBytes());
				outputStream.flush();
				System.out.println("Requisição recusada pelo peer.");
			}
		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			try {
				// Fecha a conexão com o peer
				clientSocket.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public static void main(String[] args) {
		client peer = new client();
		peer.start();
	}
}